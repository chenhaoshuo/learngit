/* 时光穿梭机 */
$git status		//查看工作区的状态

$git diff		//查看修改的内容

$git log 		//显示最近到最远的提交日志，以便确定要回退到哪个版本
$git log --pretty=oneline		//每个版本信息均单行输出

$git reset --hard HEAD^		//版本回退，HEAD^代表上一个版本，HEAD^^代表上上个版本，HEAD~100代表往上100个版本

$ cat readme.txt	//查看文件的内容

$ git reflog		//查看命令历史，以便确定回到未来的哪个版本
$ git reset --hard "版本号"		//只要知道版本号，就可以回到往后的某个版本

/* 工作区与暂存区 */
//工作区：就是在电脑里能看到的目录
//暂存区：.git版本库里存了很多东西，其中最重要的就是称为stage(或者index)的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的第一个指针叫HEAD。
$ git add		//实际上就是把文件修改添加到暂存区
$ git commit	//实际上就是把暂存区的所有内容提交到当前分支

/* 管理修改 */
//Git之所以比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改而非文件，每次修改，如果不add到暂存区，那就不会加到commit中。

/* 撤销修改 */
// 场景1：当你乱改了工作区的某个文件的内容，想直接丢弃工作区的修改时
$ git checkout -- file
// 场景2：当你不但乱改了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用如下命令。就回到场景1，第二步按场景1操作
$ git reset HEAD file
//场景3：已经提交了不合适的修改到版本库时，想要撤销本次修改，可以用版本回退命令，不过前提是还没有推送到远程库。

/* 删除文件 */
$ git rm "文件名"	//用于删除一个文件
$ git checkout -- "文件名"		//用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以”一键还原“












